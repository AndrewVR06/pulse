services:
  backend:
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        ENV_FILE: src/.env
        PGSSLROOTCERT: postgres_ssl/root.crt
        PGSSLCLIENTCERT: postgres_ssl/client.crt
        PGSSLCLIENTKEY: postgres_ssl/client.key
    develop:
      watch:
        - action: sync
          path: ./src
          target: /backend
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0

  db:
    image: postgres:17-alpine
    ports:
      - 5433:5432
    volumes:
      - ~/apps/postgres:/var/lib/postgresql/data
      - ./postgres_ssl/server.crt:/etc/ssl/certs/server.crt:ro
      - ./postgres_ssl/server.key:/etc/ssl/private/server.key:ro
      - ./postgres_ssl/root.crt:/etc/ssl/certs/root.crt:ro
    environment:
      - POSTGRES_PASSWORD=password
      - POSTGRES_USER=postgres
      - POSTGRES_DB=pulse
    command: >
      postgres
      -c ssl=on
      -c ssl_cert_file=/etc/ssl/certs/server.crt
      -c ssl_key_file=/etc/ssl/private/server.key
      -c ssl_ca_file=/etc/ssl/certs/root.crt

    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 2s
      timeout: 2s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5

  celery_worker:
    build:
      context: .
      dockerfile: ./Dockerfile.celery
      args:
        ENV_FILE: src/.env
        PGSSLROOTCERT: postgres_ssl/root.crt
        PGSSLCLIENTCERT: postgres_ssl/client.crt
        PGSSLCLIENTKEY: postgres_ssl/client.key
    command: ["poetry", "run", "celery", "-A", "celery_app", "worker", "--concurrency=1", "--loglevel=info"]
    depends_on:
      redis:
        condition: service_healthy
      backend:
        condition: service_started

